package domein;

import java.util.List;

import org.joda.time.LocalDate;

public class LeertrajectSpec {
	
	private String leertrajectCode, titel, omschrijving, doelgroep;
	private LocalDate startdatum, beschikbaarVan, beschikbaarTot;
	private List<Medewerker> medewerkersLijst;

	public LeertrajectSpec(String leertrajectCode, String titel,
			String omschrijving, String doelgroep, LocalDate startDatum,
			LocalDate beschikbaarVan, LocalDate beschikbaarTot, List<Medewerker> medewerkersLijst) {
		setLeertrajectCode(leertrajectCode);
		setTitel(titel);
		setOmschrijving(omschrijving);
		setDoelgroep(doelgroep);
		setStartdatum(startDatum);
		setBeschikbaarheidVan(beschikbaarVan);
		setBeschikbaarheidTot(beschikbaarTot);
		setMedewerkersLijst(medewerkersLijst);

	}
	
	public LeertrajectSpec() {
		super();
	}


	public String getLeertrajectCode() {
		return this.leertrajectCode;
	}

	public void setLeertrajectCode(String leertrajectCode) {
		if(leertrajectCode == "" || leertrajectCode == null)
			throw new IllegalArgumentException("Het veld leertrajectcode mag niet leeg zijn.");
		if(leertrajectCode.length() > 10)
			throw new IllegalArgumentException("Het veld leertrajectcode mag niet langer zijn dan 10 karakters.");
		this.leertrajectCode = leertrajectCode;
	}

	public String getTitel() {
		return this.titel;
	}
	
	public void setTitel(String titel) {
		if(titel == "" || titel == null)
			throw new IllegalArgumentException("Het veld titel mag niet leeg zijn.");
		if(titel.matches("[a-zA-Z0-9À-ž\\s-]*"))
				this.titel = titel;
		else throw new IllegalArgumentException("Het veld titel mag geen ongeldige tekens bevatten.");
	}

	public String getOmschrijving() {
		return this.omschrijving;
	}

	public void setOmschrijving(String omschrijving) {
		if(omschrijving == "" || omschrijving == null)
			throw new IllegalArgumentException("Het veld omschrijving mag niet leeg zijn");
		this.omschrijving = omschrijving;
	}

	public LocalDate getStartdatum() {
		return this.startdatum;
	}

	public void setStartdatum(LocalDate startDatum) {
	    this.startdatum = startDatum;
	}

	public String getDoelgroep() {
		return this.doelgroep;
	}

	public void setDoelgroep(String doelgroep) {
		if(doelgroep == "" || doelgroep == null)
			throw new IllegalArgumentException("Het veld doelgroep mag niet leeg zijn");
		this.doelgroep = doelgroep;
	}

	public LocalDate getBeschikbaarheidVan() {
		return this.beschikbaarVan;
	}

	public void setBeschikbaarheidVan(LocalDate beschikbaarVan) {
		if(startdatum.isBefore(beschikbaarVan))
				throw new IllegalArgumentException("De begindatum van het traject kan niet voor de startdatum zijn");
		this.beschikbaarVan = beschikbaarVan;
	}

	public LocalDate getBeschikbaarheidTot() {
		return this.beschikbaarTot;
	}

	public void setBeschikbaarheidTot(LocalDate beschikbaarTot) {
		if(beschikbaarTot.isBefore(beschikbaarVan) || beschikbaarTot.isBefore(startdatum))
				throw new IllegalArgumentException("De einddatum van het traject kan niet voor de startdatum of de begindatum zijn");
		this.beschikbaarTot = beschikbaarTot;
	}
	

	public List<Medewerker> getMedewerkerLijst() {
		return medewerkersLijst;
	}

	public void setMedewerkersLijst(List<Medewerker> medewerkerLijst) {
		this.medewerkersLijst = medewerkerLijst;
	}

}
